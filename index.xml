<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>overloaded bits</title>
    <link>/</link>
    <description>Recent content on overloaded bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible tips, tricks and notes</title>
      <link>/netops/ansible/tricks/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/ansible/tricks/</guid>
      <description> Remove key from dictionary Takes hostvars for the given inventory_hostname and reconstructs it without the groups key
- set_fact: dict: {} - set_fact: dict: &amp;quot;{{ dict | combine({item.key: item.value}) }}&amp;quot; when: item.key not in [&#39;groups&#39;] with_dict: &amp;quot;{{hostvars[inventory_hostname]}}&amp;quot; - debug: msg: &amp;quot;{{dict}}&amp;quot;  </description>
    </item>
    
    <item>
      <title>Junos/Ansible basics</title>
      <link>/netops/ansible/ansible-w-junos/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/ansible/ansible-w-junos/</guid>
      <description>Disclaimer: may be outdated
Retrieve config Using Galaxy module:
 - name: Retrieve the interface configuration using Galaxy module juniper_junos_config: retrieve: &#39;committed&#39; filter: &#39;&amp;lt;interfaces&amp;gt;&amp;lt;interface&amp;gt;&amp;lt;name&amp;gt;{{interface}}&amp;lt;/name&amp;gt;&amp;lt;unit&amp;gt;&amp;lt;name&amp;gt;{{unit}}&amp;lt;/name&amp;gt;&amp;lt;/unit&amp;gt;&amp;lt;/interface&amp;gt;&amp;lt;/interfaces&amp;gt;&#39; diff: true check: false commit: false format: xml register: iface_info  Using netconf_get module:
- name: Retrieve the interface configuration using netconf_get module netconf_get: source: running filter: &#39;&amp;lt;configuration&amp;gt;&amp;lt;interfaces&amp;gt;&amp;lt;interface&amp;gt;&amp;lt;name&amp;gt;{{interface}}&amp;lt;/name&amp;gt;&amp;lt;unit&amp;gt;&amp;lt;name&amp;gt;{{unit}}&amp;lt;/name&amp;gt;&amp;lt;/unit&amp;gt;&amp;lt;/interface&amp;gt;&amp;lt;/interfaces&amp;gt;&amp;lt;/configuration&amp;gt;&#39; # filter: &#39;&amp;lt;configuration&amp;gt;&amp;lt;interfaces&amp;gt;&amp;lt;interface[name=&amp;quot;ge-0/0/6&amp;quot;]&amp;gt;&amp;lt;/interface&amp;gt;&amp;lt;/interfaces&amp;gt;&amp;lt;/configuration&amp;gt;&#39; register: iface_info  Note: Junos doesnt support xpath filtering in get-config operation</description>
    </item>
    
    <item>
      <title>Network-engine module</title>
      <link>/netops/ansible/network-engine/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/ansible/network-engine/</guid>
      <description>1 --- 2 - name: Parser role 3 hosts: ios 4 roles: 5 - &amp;quot;ansible-network.network-engine&amp;quot; 6 tasks: 7 - name: &amp;quot;Get router configuration&amp;quot; 8 ios_command: 9 commands: &amp;quot;show running-config | section ^vrf_definition&amp;quot; 10 register: vrf_config 11 12 - name: DEBUG1 13 debug: 14 var: vrf_config.stdout[0] 15 16 - name: &amp;quot;Parse RT data&amp;quot; 17 command_parser: 18 file: &amp;quot;parsers/vrf.yml&amp;quot; 19 content: &amp;quot;{{ vrf_config.stdout[0] }}&amp;quot; 20 21 - name: DEBUG2 22 debug: 23 msg: &amp;quot;TEST {{item}}&amp;quot; 24 loop: &amp;quot;{{vrf_data | dictsort }}&amp;quot; 25 26   1 --- 2 - name: &amp;quot;Parser metadata&amp;quot; 3 parser_metadata: 4 version: 1.</description>
    </item>
    
    <item>
      <title>Ansible timestamps</title>
      <link>/netops/ansible/working-with-timestamp/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/ansible/working-with-timestamp/</guid>
      <description>Timestamps in Ansible Using facts (gather_facts cannot be False):
 tasks: - name: Ansible date fact example debug: var=ansible_date_time.date  Using local time via lookup:
- hosts: all tasks: - debug: msg=&amp;quot;{{ lookup(&#39;pipe&#39;,&#39;date&#39;) }}&amp;quot;  or rather formatted:
- hosts: all tasks: - debug: msg=&amp;quot;{{ lookup(&#39;pipe&#39;,&#39;date +%Y-%m-%d-%H-%M-%S&#39;) }}  Reference of other facts:
&amp;quot;date&amp;quot;: &amp;quot;2017-07-27&amp;quot;, &amp;quot;day&amp;quot;: &amp;quot;27&amp;quot;, &amp;quot;epoch&amp;quot;: &amp;quot;1501173540&amp;quot;, &amp;quot;hour&amp;quot;: &amp;quot;22&amp;quot;, &amp;quot;iso8601&amp;quot;: &amp;quot;2017-07-27T16:39:00Z&amp;quot;, &amp;quot;iso8601_basic&amp;quot;: &amp;quot;20170727T220900129160&amp;quot;, &amp;quot;iso8601_basic_short&amp;quot;: &amp;quot;20170727T220900&amp;quot;, &amp;quot;iso8601_micro&amp;quot;: &amp;quot;2017-07-27T16:39:00.129240Z&amp;quot;, &amp;quot;minute&amp;quot;: &amp;quot;09&amp;quot;, &amp;quot;month&amp;quot;: &amp;quot;07&amp;quot;, &amp;quot;second&amp;quot;: &amp;quot;00&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;22:09:00&amp;quot;, &amp;quot;tz&amp;quot;: &amp;quot;IST&amp;quot;, &amp;quot;tz_offset&amp;quot;: &amp;quot;+0530&amp;quot;, &amp;quot;weekday&amp;quot;: &amp;quot;Thursday&amp;quot;, &amp;quot;weekday_number&amp;quot;: &amp;quot;4&amp;quot;, &amp;quot;weeknumber&amp;quot;: &amp;quot;30&amp;quot;, &amp;quot;year&amp;quot;: &amp;quot;2017&amp;quot;  Sources and References http://www.</description>
    </item>
    
    <item>
      <title>Working with Excel in Python</title>
      <link>/netops/python/openpyxl/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/python/openpyxl/</guid>
      <description>Working with Excel in Python Import module, create workbook
from openpyxl import Workbook wb = Workbook() Create a sheet
wb.create_sheet(title=&amp;#39;rtr1&amp;#39;) Get sheet by name
ws1 = wb[&amp;#39;rtr1&amp;#39;] Delete a sheet
del wb[&amp;#39;Sheet&amp;#39;] Display list of sheetnames
wb.sheetnames Access a cell in a sheet
cell = ws1[&amp;#39;A1&amp;#39;] Save workbook to a file
wb.save(filename=&amp;#39;vrftestreport.xlsx&amp;#39;) Sources and references
http://www.pythonexcel.com/ https://openpyxl.readthedocs.io/en/stable/usage.html</description>
    </item>
    
    <item>
      <title>Git Panic Commands</title>
      <link>/netops/git/panic_buttons/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/git/panic_buttons/</guid>
      <description>What to do when you screw up in GIT Consult this link: Oh shit, GIT
Especially git reflog and git reset HEAD@{index}.
If needed to restore the entire working directory you can for example delete everything (but not the .git repo) and do git reset --hard to rebuild the working directory.</description>
    </item>
    
    <item>
      <title>IOS-XE CLI</title>
      <link>/vendors/iosxe_cli/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/vendors/iosxe_cli/</guid>
      <description>IOS-XE CLI tricks
IOS-XE Datapath Packet Trace Feature Run: debug platform condition interface GigabitEthernet0/0/0.100 ipv4 &amp;lt;IP ADDRESS&amp;gt;/32 both debug platform condition start debug platform packet-trace packet 1024 debug platform packet-trace enable Examine: show platform packet-trace statistics show platform packet-trace summ show platform packet-trace packet 1 Delete: debug platform condition stop clear platform packet-trace statistics clear platform condition all  Source Cisco Docs</description>
    </item>
    
    <item>
      <title>Integrated IS-IS notes</title>
      <link>/igps/isis/isis/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/igps/isis/isis/</guid>
      <description>Basics  originaly ISO protocol RFC 1195 defined for (also) routing TCP/IP SPF algoritm / Dijkstra  ISO Adressing  Address consists of: IDP + DSP  IDP = Initial Domain Part  part standardized by ISO, specifies format &amp;amp; addressing authority for DSP part  DSP = Domain Specific Part  HO-DSP (High Order part of DSL) ID (system identifier) SEL (NSAP selector)   IDP+HO-DSP can be called area address  for transition purposes there might be multiple area addresses in one area area address in OSI addressing allows l1 routers to identify packets to destinations outside their area   ISO Areas  Level 1 and Level 2 areas Level 1  L1 routers know the topology inside their area; they do not know the identity of routers outside their area L1 routers forward all traffic for destinations outside their area to level 2 router in their area L1 routers within an area, based on ID portion of the ISO address L1 routers examine the ISO address, if within their own area then they route towards destination, if not they ship the packet to nearest L2 router L1 router will become neighbor only with routers in the SAME area  Level 2  L2 routers in Level 2 area do not need to know the topology of level 1 areas as well L2 routers route based on area address (IDP+HO-DSP), they route towards areas (without regard to the internal structure of the area) L2 router will become neighbor with another L2 router REGARDLESS of area address  only L2 LSPs will flow on link between two different areas   L2 router might be also L1 router in one area</description>
    </item>
    
    <item>
      <title>Junos CLI</title>
      <link>/vendors/junos_cli/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/vendors/junos_cli/</guid>
      <description>Junos CLI tricks
Show only certain prefix length routes The &amp;ldquo;match-prefix&amp;rdquo; command allows for regex filtering
root@vsrx&amp;gt; show route protocol ospf match-prefix */32 inet.0: 42 destinations, 42 routes (42 active, 0 holddown, 0 hidden) + = Active Route, - = Last Active, * = Both 172.30.5.2/32 *[OSPF/10] 01:31:06, metric 1 &amp;gt; to 172.30.0.2 via ae0.0 172.30.5.3/32 *[OSPF/10] 01:31:06, metric 2 &amp;gt; to 172.30.0.2 via ae0.0 172.30.5.4/32 *[OSPF/10] 00:43:54, metric 3 &amp;gt; to 172.</description>
    </item>
    
    <item>
      <title>OSPF adj. formation notes</title>
      <link>/igps/ospf/adj_formation/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/igps/ospf/adj_formation/</guid>
      <description>Adjacency formation theory DBD Packets bits:
 I = Initial bit M = More bit MS = Master/Slave bit  Adjacency formation practise  PCAP of simple OSPF adj. formation: here Traceoptions: R1 and R2  My notes on the packet captures and traceoptions of simple adjacency formation follows:
 OSPF speakers send out hello packets  R1 sends hello packet to 224.0.0.5:
Frame 5: 90 bytes on wire (720 bits), 90 bytes captured (720 bits) on interface 0 Ethernet II, Src: 50:00:00:0c:00:00 (50:00:00:0c:00:00), Dst: IPv4mcast_05 (01:00:5e:00:00:05) Internet Protocol Version 4, Src: 192.</description>
    </item>
    
    <item>
      <title>OSPF troubleshooting</title>
      <link>/igps/ospf/troubleshooting/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/igps/ospf/troubleshooting/</guid>
      <description>Troubleshooting Neighborship problems checklist Source: iNET ZERO
 Interfaces present in [edit protocols ospf] Interfaces are not passive Interfaces are not down No FF is blocking OSPF protocol 89 Area mismatch Timer mismatch Auth. mismatch Area type mismatch Subnet mask mismatch Duplicate router-id MTU mismatch DR priority = 0 on both routers Duplicate interface ip address Interface type mismatch  Tools Show commands. Traceoptions. Monitor traffic interface.
monitor traffic interface em1 size 1500 no-resolve detail | matching “ip proto ospf”  Authentication debugs Authentication problem is best identified using traceoptions:</description>
    </item>
    
    <item>
      <title>Python Virtual Enviroments</title>
      <link>/netops/python/python-virtualenvs/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/netops/python/python-virtualenvs/</guid>
      <description>Using mkvirtualenv w/ Python 3
mkvirtualenv --python=/usr/bin/python3 nameOfEnvironment  </description>
    </item>
    
    <item>
      <title>JNCIx-SP</title>
      <link>/certs/jncix-sp/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/certs/jncix-sp/</guid>
      <description> Links  jncip-sp: the ultimate resource for juniper’s professional service provider cert:  https://www.networkfuntimes.com/jncip-sp-the-ultimate-resource-for-junipers-professional-service-provider-cert/   </description>
    </item>
    
    <item>
      <title>List of materials to study</title>
      <link>/ipspace-course-notes/watch-list/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/ipspace-course-notes/watch-list/</guid>
      <description>Links  What is NetDevOps? Why? - Leslie Carr (SFMIX), RIPE71 also check the spotify github for production playbooks NAPALM - Elisa Jasinska &amp;amp; David Barroso, NANOG64 How Facebook Learned to Stop Worrying and Love the Network (Jose Leitao, David Rothera, RIPE71) Compliance tools  networklore.com/nk-compare-configs github.com/cidrblock/netcopa  Parsing tool TextFSM Python for Network Engineers – A Practical Guide for Getting Started – Jeremy Schulman https://www.youtube.com/watch?v=6INPb9EAgBI  Books  Mythical Man-Month - Frederic P.</description>
    </item>
    
    <item>
      <title>VPLS</title>
      <link>/mpls-vpns/vpls/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/mpls-vpns/vpls/</guid>
      <description>Virtual Private LAN Service = VPLS = Layer 2 MPLS VPN
Basics  Variants
 RFC 4761 - Virtual Private LAN Service (VPLS) - Using BGP for Auto-Discovery and Signaling RFC 4762 - Virtual Private LAN Service (VPLS) Using Label Distribution Protocol (LDP) Signaling  BGP auto-discovery
 PEs auto-discover other PEs in the same VPLS instance automatic pseudowire establishment full MPLS LSP mesh between PEs (RSVP or LDP signalled)  BGP or LDP for service label distribution</description>
    </item>
    
    <item>
      <title>IGMP</title>
      <link>/multicast/igmp/</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/multicast/igmp/</guid>
      <description> IGMP is a protocol &amp;hellip;
print(test) IGMPv1 IGMPv1 is
IGMPv2 IGMPv2 is
IGMPv3 IGMPv3 is
Resources Decoding packets youtube channel, excelent deep-dive to all of multicast: https://www.youtube.com/channel/UC2xDUkd_PuxDvhl4zQz67Aw
  </description>
    </item>
    
    <item>
      <title>Python basics</title>
      <link>/netops/python/python-basics/</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/netops/python/python-basics/</guid>
      <description> test </description>
    </item>
    
  </channel>
</rss>